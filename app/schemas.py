from pydantic import BaseModel
from typing import List, Dict, Any, Optional

class Token(BaseModel):
    """
    <summary>
    Represents the data structure for an OAuth2 access token returned upon successful authentication.
    </summary>
    <param name="access_token" type="str">The JWT (JSON Web Token) string.</param>
    <param name="token_type" type="str">The type of the token, typically 'bearer'.</param>
    """
    access_token: str
    token_type: str

class TokenData(BaseModel):
    """
    <summary>
    Represents the payload (data) decoded from a JWT access token.
    </summary>
    <param name="username" type="str | None">The username of the authenticated user, extracted from the token's 'sub' claim.</param>
    """
    username: str | None = None

class User(BaseModel):
    """
    <summary>
    Represents the basic, non-sensitive information about a user.
    </summary>
    <param name="username" type="str">The unique username for the user.</param>
    <param name="max_qubits" type="int">The maximum number of qubits the user is allowed to simulate based on their plan.</param>
    """
    username: str
    max_qubits: int

class UserInDB(User):
    """
    <summary>
    Represents the full user data as stored in the database, including sensitive information.
    </summary>
    <param name="hashed_password" type="str">The user's password, hashed using a secure algorithm.</param>
    """
    hashed_password: str

class Gate(BaseModel):
    """
    <summary>
    Defines the structure for a single quantum gate within a circuit.
    </summary>
    <param name="gate" type="str">The identifier for the gate type (e.g., 'h', 'cnot', 'rx').</param>
    <param name="time" type="int">The time step (column index) at which the gate is applied in the circuit.</param>
    <param name="targets" type="List[int]">A list of qubit indices that the gate's primary operation acts upon.</param>
    <param name="controls" type="List[int]">A list of control qubit indices for multi-qubit controlled gates.</param>
    <param name="parameters" type="Optional[Dict[str, Any]]">An optional dictionary for parameters of parametric gates (e.g., {'theta': 1.57}).</param>
    """
    gate: str
    time: int
    targets: List[int]
    controls: List[int] = []
    parameters: Optional[Dict[str, Any]] = None

class CircuitBase(BaseModel):
    """
    <summary>
    The base schema for a quantum circuit, containing the core properties.
    </summary>
    <param name="name" type="str">The user-defined name of the circuit.</param>
    <param name="qubits" type="int">The number of qubits in the circuit.</param>
    <param name="gates" type="List[Gate]">A list of all the gates that make up the circuit.</param>
    """
    name: str
    qubits: int
    gates: List[Gate]

class CircuitCreate(CircuitBase):
    """
    <summary>
    The schema used for creating or updating a circuit via API requests.
    Inherits all properties from CircuitBase.
    </summary>
    """
    pass

class Circuit(CircuitBase):
    """
    <summary>
    The full schema for a circuit as it is stored in the database, including server-generated fields.
    </summary>
    <param name="id" type="str">The unique identifier for the circuit, generated by the server.</param>
    <param name="owner" type="str">The username of the user who owns the circuit.</param>
    """
    id: str
    owner: str

class SimulationJob(BaseModel):
    """
    <summary>
    The response schema after successfully initiating a simulation.
    </summary>
    <param name="job_id" type="str">The unique identifier for the background simulation job.</param>
    <param name="status_url" type="str">The URL that the client can poll to get the status and results of the job.</param>
    """
    job_id: str
    status_url: str

class SimulationResult(BaseModel):
    """
    <summary>
    The schema for retrieving the status and results of a simulation job.
    </summary>
    <param name="job_id" type="str">The unique identifier for the simulation job.</param>
    <param name="status" type="str">The current status of the job (e.g., 'pending', 'completed', 'failed').</param>
    <param name="results" type="Dict[str, Any] | None">A dictionary containing the simulation results if the job is completed, otherwise null.</param>
    <param name="error" type="str | None">An error message if the simulation job failed, otherwise null.</param>
    """
    job_id: str
    status: str
    results: Dict[str, Any] | None = None
    error: str | None = None
